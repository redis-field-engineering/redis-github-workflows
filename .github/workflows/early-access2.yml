name: 'Early Access'

on:
  workflow_call:
    inputs:
      jreleaser-version:
        default: 'latest'
        required: false
        type: string
      jreleaser-arguments:
        default: 'release'
        required: false
        type: string
      java-version:
        default: '17'
        required: false
        type: string
      tasks:
        default: 'build aggregateTestReport publish'
        required: false
        type: string
      tests-dir:
        default: 'build/reports/tests/aggregate'
        required: false
        type: string

jobs:
  earlyaccess:
    name: 'Early Access'
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous run
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'zulu'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: ${{ runner.os }}-gradlew-

      - name: Build
        run: |
          ./gradlew -Prelease=true -PreproducibleBuild=true ${{ inputs.tasks }} -S

      - name: Upload test reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: |
            ${{ inputs.tests-dir }}
  
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Version
        id: vars
        shell: bash
        run: |
          VERSION=$(grep '^version\s*=\s*' gradle.properties | cut -d'=' -f2 | xargs)
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          if [[ "$VERSION" == *-SNAPSHOT ]]; then
            echo "SNAPSHOT=true" >> "$GITHUB_OUTPUT"
          else
            echo "SNAPSHOT=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Release
        if: ${{ steps.vars.outputs.SNAPSHOT }}
        uses: jreleaser/release-action@v2
        with:
          arguments: ${{ inputs.jreleaser-arguments }}
          version: ${{ inputs.jreleaser-version }}
        env:
          JRELEASER_DOCKER_GITHUB_USERNAME: ${{ secrets.GIT_USER }}
          JRELEASER_DOCKER_GITHUB_PASSWORD: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_DOCKER_DEFAULT_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          JRELEASER_GITHUB_PASSWORD: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GITHUB_USERNAME: ${{ secrets.GIT_USER }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          JRELEASER_PROJECT_VERSION: ${{ steps.vars.outputs.VERSION }}
          JRELEASER_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties
