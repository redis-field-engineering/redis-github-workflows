name: Release

on:
  workflow_call:
    inputs:
      bump:
        required: true
        type: string
      jreleaser-version:
        default: 'latest'
        required: false
        type: string
      java-version:
        default: '17'
        required: false
        type: string
      tasks:
        default: 'build aggregateTestReport publish'
        required: false
        type: string
      update-external-readme:
        description: 'Whether to update README in an external repository'
        required: false
        type: boolean
        default: false
      external-repo:
        description: 'External repository to update README in (org/repo)'
        required: false
        type: string
        default: ''
      external-readme-path:
        description: 'Path to README in external repository'
        required: false
        type: string
        default: 'README.adoc'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous run
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'zulu'

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}-${{ hashFiles('**/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Gradle wrapper
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradlew-${{ hashFiles('**/gradlew') }}
          restore-keys: ${{ runner.os }}-gradlew-

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Bump version in gradle.properties and README.adoc
        id: bump
        run: |
          BUMP_TYPE="${{ inputs.bump }}"
          FILE="gradle.properties"
          README="README.adoc"

          # Extract current version
          VERSION_LINE=$(grep "^version\s*=\s*" "$FILE")
          VERSION=${VERSION_LINE#version=}
          IFS='.' read -r major minor patch <<< "$VERSION"

          # Bump version
          case "$BUMP_TYPE" in
            major) major=$((major + 1)); minor=0; patch=0 ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            patch) patch=$((patch + 1)) ;;
          esac

          NEW_VERSION="${major}.${minor}.${patch}"
          echo "New version: $NEW_VERSION"

          # Update gradle.properties
          sed -i -E "s/^version\s*=.*/version=${NEW_VERSION}/" "$FILE"

          # Update README.adoc
          sed -i -E "s/^:project-version:.*/:project-version: ${NEW_VERSION}/" "$README"

          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Commit and push version bump
        run: |
          git add gradle.properties README.adoc
          git commit --allow-empty -m "Releasing version ${{ steps.bump.outputs.new_version }}"
          git push origin HEAD

      - name: Checkout external repository
        if: ${{ inputs.update-external-readme == true && inputs.external-repo != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.external-repo }}
          path: external-repo
          token: ${{ secrets.GIT_ACCESS_TOKEN }}
          fetch-depth: 1

      - name: Update README in external repository
        if: ${{ inputs.update-external-readme == true && inputs.external-repo != '' }}
        run: |
          EXTERNAL_README="external-repo/${{ inputs.external-readme-path }}"
          
          if [ -f "$EXTERNAL_README" ]; then
            # Update version in external README
            sed -i -E "s/^:project-version:.*/:project-version: ${{ steps.bump.outputs.new_version }}/" "$EXTERNAL_README"
            
            cd external-repo
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add "${{ inputs.external-readme-path }}"
            git commit -m "Update project version to ${{ steps.bump.outputs.new_version }}"
            git push
            cd ..
          else
            echo "WARNING: External README file not found at $EXTERNAL_README"
            exit 1
          fi

      - name: Build
        run: |
          ./gradlew -Pprofile=release -PreproducibleBuild=true ${{ inputs.tasks }} -S
        env:
          GRGIT_USER: ${{ secrets.GIT_USER }}
          GRGIT_PASS: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Upload test reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            build/reports/tests/aggregate/

      - name: Assemble
        uses: jreleaser/release-action@v2
        with:
          arguments: assemble
          version: ${{ inputs.jreleaser-version }}
        env:
          JRELEASER_PROJECT_VERSION: ${{ steps.bump.outputs.new_version }}

      - name: Release
        uses: jreleaser/release-action@v2
        with:
          arguments: full-release
          version: ${{ inputs.jreleaser-version }}
        env:
          JRELEASER_DOCKER_GITHUB_USERNAME: ${{ secrets.GIT_USER }}
          JRELEASER_DOCKER_GITHUB_PASSWORD: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_DOCKER_DEFAULT_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          JRELEASER_DOCKER_DEFAULT_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          JRELEASER_GITHUB_PASSWORD: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          JRELEASER_GITHUB_USERNAME: ${{ secrets.GIT_USER }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          JRELEASER_PROJECT_VERSION: ${{ steps.bump.outputs.new_version }}
          JRELEASER_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: |
            out/jreleaser/trace.log
            out/jreleaser/output.properties