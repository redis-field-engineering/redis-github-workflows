name: Set Version
description: Set version in project files (VERSION, README.adoc, docs/antora.yml)

inputs:
  version:
    description: 'Version to set'
    required: true
  commit:
    description: 'Create a git commit with the version change'
    required: false
    default: 'false'
  commit-message:
    description: 'Commit message (if commit is true)'
    required: false
    default: 'Set version to {version}'
  commit-name:
    description: 'Git commit author name'
    required: false
    default: 'GitHub Actions'
  commit-email:
    description: 'Git commit author email'
    required: false
    default: 'noreply@github.com'
  push:
    description: 'Push the commit to remote (requires commit: true)'
    required: false
    default: 'false'
  branch:
    description: 'Branch to push to (if push is true)'
    required: false
    default: 'main'

runs:
  using: composite
  steps:
    - name: Set version in files
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        echo "Setting version to ${VERSION}"

        # Update VERSION file
        echo "${VERSION}" > VERSION
        git add VERSION

        # Update README.adoc if it exists
        if [ -f README.adoc ]; then
          sed -i -e "s/^\:project-version\:\ .*/:project-version: ${VERSION}/g" README.adoc
          git add README.adoc
        fi

        # Update docs/antora.yml if it exists
        if [ -f docs/antora.yml ]; then
          sed -i "s/^version: '.*'/version: '${VERSION}'/" docs/antora.yml
          git add docs/antora.yml
        fi

        echo "Version set to ${VERSION}"

    - name: Commit changes
      if: inputs.commit == 'true'
      shell: bash
      run: |
        git config --global user.email "${{ inputs.commit-email }}"
        git config --global user.name "${{ inputs.commit-name }}"

        COMMIT_MSG="${{ inputs.commit-message }}"
        COMMIT_MSG="${COMMIT_MSG/\{version\}/${{ inputs.version }}}"

        git commit --allow-empty -a -m "${COMMIT_MSG}"

    - name: Push changes
      if: inputs.commit == 'true' && inputs.push == 'true'
      shell: bash
      run: |
        git push origin ${{ inputs.branch }}
